diff --git a/bun.lock b/bun.lock
index 64b5a0a..de032f0 100644
--- a/bun.lock
+++ b/bun.lock
@@ -23,6 +23,7 @@
         "eslint": "^9.18.0",
         "eslint-config-prettier": "^9.1.0",
         "prettier": "^3.4.2",
+        "typescript-eslint": "^8.37.0",
       },
       "peerDependencies": {
         "typescript": "^5.0.0",
@@ -80,11 +81,17 @@
 
     "@isaacs/cliui": ["@isaacs/cliui@8.0.2", "", { "dependencies": { "string-width": "^5.1.2", "string-width-cjs": "npm:string-width@^4.2.0", "strip-ansi": "^7.0.1", "strip-ansi-cjs": "npm:strip-ansi@^6.0.1", "wrap-ansi": "^8.1.0", "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0" } }, "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA=="],
 
+    "@nodelib/fs.scandir": ["@nodelib/fs.scandir@2.1.5", "", { "dependencies": { "@nodelib/fs.stat": "2.0.5", "run-parallel": "^1.1.9" } }, "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g=="],
+
+    "@nodelib/fs.stat": ["@nodelib/fs.stat@2.0.5", "", {}, "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A=="],
+
+    "@nodelib/fs.walk": ["@nodelib/fs.walk@1.2.8", "", { "dependencies": { "@nodelib/fs.scandir": "2.1.5", "fastq": "^1.6.0" } }, "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg=="],
+
     "@pkgjs/parseargs": ["@pkgjs/parseargs@0.11.0", "", {}, "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg=="],
 
     "@sqltools/formatter": ["@sqltools/formatter@1.2.5", "", {}, "sha512-Uy0+khmZqUrUGm5dmMqVlnvufZRSK0FbYzVgp0UMstm+F5+W2/jnEEQyc9vo1ZR/E5ZI/B1WjjoTqBqwJL6Krw=="],
 
-    "@types/bun": ["@types/bun@1.2.17", "", { "dependencies": { "bun-types": "1.2.17" } }, "sha512-l/BYs/JYt+cXA/0+wUhulYJB6a6p//GTPiJ7nV+QHa8iiId4HZmnu/3J/SowP5g0rTiERY2kfGKXEK5Ehltx4Q=="],
+    "@types/bun": ["@types/bun@1.2.19", "", { "dependencies": { "bun-types": "1.2.19" } }, "sha512-d9ZCmrH3CJ2uYKXQIUuZ/pUnTqIvLDS0SK7pFmbx8ma+ziH/FRMoAq5bYpRG7y+w1gl+HgyNZbtqgMq4W4e2Lg=="],
 
     "@types/estree": ["@types/estree@1.0.8", "", {}, "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w=="],
 
@@ -92,6 +99,28 @@
 
     "@types/node": ["@types/node@24.0.7", "", { "dependencies": { "undici-types": "~7.8.0" } }, "sha512-YIEUUr4yf8q8oQoXPpSlnvKNVKDQlPMWrmOcgzoduo7kvA2UF0/BwJ/eMKFTiTtkNL17I0M6Xe2tvwFU7be6iw=="],
 
+    "@types/react": ["@types/react@19.1.8", "", { "dependencies": { "csstype": "^3.0.2" } }, "sha512-AwAfQ2Wa5bCx9WP8nZL2uMZWod7J7/JSplxbTmBQ5ms6QpqNYm672H0Vu9ZVKVngQ+ii4R/byguVEUZQyeg44g=="],
+
+    "@typescript-eslint/eslint-plugin": ["@typescript-eslint/eslint-plugin@8.37.0", "", { "dependencies": { "@eslint-community/regexpp": "^4.10.0", "@typescript-eslint/scope-manager": "8.37.0", "@typescript-eslint/type-utils": "8.37.0", "@typescript-eslint/utils": "8.37.0", "@typescript-eslint/visitor-keys": "8.37.0", "graphemer": "^1.4.0", "ignore": "^7.0.0", "natural-compare": "^1.4.0", "ts-api-utils": "^2.1.0" }, "peerDependencies": { "@typescript-eslint/parser": "^8.37.0", "eslint": "^8.57.0 || ^9.0.0", "typescript": ">=4.8.4 <5.9.0" } }, "sha512-jsuVWeIkb6ggzB+wPCsR4e6loj+rM72ohW6IBn2C+5NCvfUVY8s33iFPySSVXqtm5Hu29Ne/9bnA0JmyLmgenA=="],
+
+    "@typescript-eslint/parser": ["@typescript-eslint/parser@8.37.0", "", { "dependencies": { "@typescript-eslint/scope-manager": "8.37.0", "@typescript-eslint/types": "8.37.0", "@typescript-eslint/typescript-estree": "8.37.0", "@typescript-eslint/visitor-keys": "8.37.0", "debug": "^4.3.4" }, "peerDependencies": { "eslint": "^8.57.0 || ^9.0.0", "typescript": ">=4.8.4 <5.9.0" } }, "sha512-kVIaQE9vrN9RLCQMQ3iyRlVJpTiDUY6woHGb30JDkfJErqrQEmtdWH3gV0PBAfGZgQXoqzXOO0T3K6ioApbbAA=="],
+
+    "@typescript-eslint/project-service": ["@typescript-eslint/project-service@8.37.0", "", { "dependencies": { "@typescript-eslint/tsconfig-utils": "^8.37.0", "@typescript-eslint/types": "^8.37.0", "debug": "^4.3.4" }, "peerDependencies": { "typescript": ">=4.8.4 <5.9.0" } }, "sha512-BIUXYsbkl5A1aJDdYJCBAo8rCEbAvdquQ8AnLb6z5Lp1u3x5PNgSSx9A/zqYc++Xnr/0DVpls8iQ2cJs/izTXA=="],
+
+    "@typescript-eslint/scope-manager": ["@typescript-eslint/scope-manager@8.37.0", "", { "dependencies": { "@typescript-eslint/types": "8.37.0", "@typescript-eslint/visitor-keys": "8.37.0" } }, "sha512-0vGq0yiU1gbjKob2q691ybTg9JX6ShiVXAAfm2jGf3q0hdP6/BruaFjL/ManAR/lj05AvYCH+5bbVo0VtzmjOA=="],
+
+    "@typescript-eslint/tsconfig-utils": ["@typescript-eslint/tsconfig-utils@8.37.0", "", { "peerDependencies": { "typescript": ">=4.8.4 <5.9.0" } }, "sha512-1/YHvAVTimMM9mmlPvTec9NP4bobA1RkDbMydxG8omqwJJLEW/Iy2C4adsAESIXU3WGLXFHSZUU+C9EoFWl4Zg=="],
+
+    "@typescript-eslint/type-utils": ["@typescript-eslint/type-utils@8.37.0", "", { "dependencies": { "@typescript-eslint/types": "8.37.0", "@typescript-eslint/typescript-estree": "8.37.0", "@typescript-eslint/utils": "8.37.0", "debug": "^4.3.4", "ts-api-utils": "^2.1.0" }, "peerDependencies": { "eslint": "^8.57.0 || ^9.0.0", "typescript": ">=4.8.4 <5.9.0" } }, "sha512-SPkXWIkVZxhgwSwVq9rqj/4VFo7MnWwVaRNznfQDc/xPYHjXnPfLWn+4L6FF1cAz6e7dsqBeMawgl7QjUMj4Ow=="],
+
+    "@typescript-eslint/types": ["@typescript-eslint/types@8.37.0", "", {}, "sha512-ax0nv7PUF9NOVPs+lmQ7yIE7IQmAf8LGcXbMvHX5Gm+YJUYNAl340XkGnrimxZ0elXyoQJuN5sbg6C4evKA4SQ=="],
+
+    "@typescript-eslint/typescript-estree": ["@typescript-eslint/typescript-estree@8.37.0", "", { "dependencies": { "@typescript-eslint/project-service": "8.37.0", "@typescript-eslint/tsconfig-utils": "8.37.0", "@typescript-eslint/types": "8.37.0", "@typescript-eslint/visitor-keys": "8.37.0", "debug": "^4.3.4", "fast-glob": "^3.3.2", "is-glob": "^4.0.3", "minimatch": "^9.0.4", "semver": "^7.6.0", "ts-api-utils": "^2.1.0" }, "peerDependencies": { "typescript": ">=4.8.4 <5.9.0" } }, "sha512-zuWDMDuzMRbQOM+bHyU4/slw27bAUEcKSKKs3hcv2aNnc/tvE/h7w60dwVw8vnal2Pub6RT1T7BI8tFZ1fE+yg=="],
+
+    "@typescript-eslint/utils": ["@typescript-eslint/utils@8.37.0", "", { "dependencies": { "@eslint-community/eslint-utils": "^4.7.0", "@typescript-eslint/scope-manager": "8.37.0", "@typescript-eslint/types": "8.37.0", "@typescript-eslint/typescript-estree": "8.37.0" }, "peerDependencies": { "eslint": "^8.57.0 || ^9.0.0", "typescript": ">=4.8.4 <5.9.0" } }, "sha512-TSFvkIW6gGjN2p6zbXo20FzCABbyUAuq6tBvNRGsKdsSQ6a7rnV6ADfZ7f4iI3lIiXc4F4WWvtUfDw9CJ9pO5A=="],
+
+    "@typescript-eslint/visitor-keys": ["@typescript-eslint/visitor-keys@8.37.0", "", { "dependencies": { "@typescript-eslint/types": "8.37.0", "eslint-visitor-keys": "^4.2.1" } }, "sha512-YzfhzcTnZVPiLfP/oeKtDp2evwvHLMe0LOy7oe+hb9KKIumLNohYS9Hgp1ifwpu42YWxhZE8yieggz6JpqO/1w=="],
+
     "abstract-logging": ["abstract-logging@2.0.1", "", {}, "sha512-2BjRTZxTPvheOvGbBslFSYOUkr+SjPtOnrLP33f+VIWLzezQpZcqVg7ja3L4dBXmzzgwT+a029jRx5PCi3JuiA=="],
 
     "acorn": ["acorn@8.15.0", "", { "bin": { "acorn": "bin/acorn" } }, "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg=="],
@@ -122,9 +151,11 @@
 
     "brace-expansion": ["brace-expansion@1.1.12", "", { "dependencies": { "balanced-match": "^1.0.0", "concat-map": "0.0.1" } }, "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg=="],
 
+    "braces": ["braces@3.0.3", "", { "dependencies": { "fill-range": "^7.1.1" } }, "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA=="],
+
     "buffer": ["buffer@6.0.3", "", { "dependencies": { "base64-js": "^1.3.1", "ieee754": "^1.2.1" } }, "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA=="],
 
-    "bun-types": ["bun-types@1.2.17", "", { "dependencies": { "@types/node": "*" } }, "sha512-ElC7ItwT3SCQwYZDYoAH+q6KT4Fxjl8DtZ6qDulUFBmXA8YB4xo+l54J9ZJN+k2pphfn9vk7kfubeSd5QfTVJQ=="],
+    "bun-types": ["bun-types@1.2.19", "", { "dependencies": { "@types/node": "*" }, "peerDependencies": { "@types/react": "^19" } }, "sha512-uAOTaZSPuYsWIXRpj7o56Let0g/wjihKCkeRqUBhlLVM/Bt+Fj9xTo+LhC1OV1XDaGkz4hNC80et5xgy+9KTHQ=="],
 
     "callsites": ["callsites@3.1.0", "", {}, "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ=="],
 
@@ -144,6 +175,8 @@
 
     "cross-spawn": ["cross-spawn@7.0.6", "", { "dependencies": { "path-key": "^3.1.0", "shebang-command": "^2.0.0", "which": "^2.0.1" } }, "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA=="],
 
+    "csstype": ["csstype@3.1.3", "", {}, "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw=="],
+
     "dayjs": ["dayjs@1.11.13", "", {}, "sha512-oaMBel6gjolK862uaPQOVTA7q3TZhuSvuMQAAglQDOWYO9A91IrAOUJEyKVlqJlHE0vq5p5UXxzdPfMH/x6xNg=="],
 
     "debug": ["debug@4.4.1", "", { "dependencies": { "ms": "^2.1.3" } }, "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ=="],
@@ -186,6 +219,8 @@
 
     "fast-deep-equal": ["fast-deep-equal@3.1.3", "", {}, "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q=="],
 
+    "fast-glob": ["fast-glob@3.3.3", "", { "dependencies": { "@nodelib/fs.stat": "^2.0.2", "@nodelib/fs.walk": "^1.2.3", "glob-parent": "^5.1.2", "merge2": "^1.3.0", "micromatch": "^4.0.8" } }, "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg=="],
+
     "fast-json-stable-stringify": ["fast-json-stable-stringify@2.1.0", "", {}, "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="],
 
     "fast-json-stringify": ["fast-json-stringify@6.0.1", "", { "dependencies": { "@fastify/merge-json-schemas": "^0.2.0", "ajv": "^8.12.0", "ajv-formats": "^3.0.1", "fast-uri": "^3.0.0", "json-schema-ref-resolver": "^2.0.0", "rfdc": "^1.2.0" } }, "sha512-s7SJE83QKBZwg54dIbD5rCtzOBVD43V1ReWXXYqBgwCwHLYAAT0RQc/FmrQglXqWPpz6omtryJQOau5jI4Nrvg=="],
@@ -206,6 +241,8 @@
 
     "file-entry-cache": ["file-entry-cache@8.0.0", "", { "dependencies": { "flat-cache": "^4.0.0" } }, "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ=="],
 
+    "fill-range": ["fill-range@7.1.1", "", { "dependencies": { "to-regex-range": "^5.0.1" } }, "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg=="],
+
     "find-my-way": ["find-my-way@9.3.0", "", { "dependencies": { "fast-deep-equal": "^3.1.3", "fast-querystring": "^1.0.0", "safe-regex2": "^5.0.0" } }, "sha512-eRoFWQw+Yv2tuYlK2pjFS2jGXSxSppAs3hSQjfxVKxM5amECzIgYYc1FEI8ZmhSh/Ig+FrKEz43NLRKJjYCZVg=="],
 
     "find-up": ["find-up@5.0.0", "", { "dependencies": { "locate-path": "^6.0.0", "path-exists": "^4.0.0" } }, "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng=="],
@@ -224,6 +261,8 @@
 
     "globals": ["globals@14.0.0", "", {}, "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ=="],
 
+    "graphemer": ["graphemer@1.4.0", "", {}, "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag=="],
+
     "has-flag": ["has-flag@4.0.0", "", {}, "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ=="],
 
     "ieee754": ["ieee754@1.2.1", "", {}, "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA=="],
@@ -246,6 +285,8 @@
 
     "is-glob": ["is-glob@4.0.3", "", { "dependencies": { "is-extglob": "^2.1.1" } }, "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg=="],
 
+    "is-number": ["is-number@7.0.0", "", {}, "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng=="],
+
     "isexe": ["isexe@2.0.0", "", {}, "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw=="],
 
     "jackspeak": ["jackspeak@3.4.3", "", { "dependencies": { "@isaacs/cliui": "^8.0.2" }, "optionalDependencies": { "@pkgjs/parseargs": "^0.11.0" } }, "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw=="],
@@ -272,6 +313,10 @@
 
     "lru-cache": ["lru-cache@10.4.3", "", {}, "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ=="],
 
+    "merge2": ["merge2@1.4.1", "", {}, "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg=="],
+
+    "micromatch": ["micromatch@4.0.8", "", { "dependencies": { "braces": "^3.0.3", "picomatch": "^2.3.1" } }, "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA=="],
+
     "minimatch": ["minimatch@3.1.2", "", { "dependencies": { "brace-expansion": "^1.1.7" } }, "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw=="],
 
     "minipass": ["minipass@7.1.2", "", {}, "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw=="],
@@ -320,6 +365,8 @@
 
     "pgpass": ["pgpass@1.0.5", "", { "dependencies": { "split2": "^4.1.0" } }, "sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug=="],
 
+    "picomatch": ["picomatch@2.3.1", "", {}, "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA=="],
+
     "pino": ["pino@9.7.0", "", { "dependencies": { "atomic-sleep": "^1.0.0", "fast-redact": "^3.1.1", "on-exit-leak-free": "^2.1.0", "pino-abstract-transport": "^2.0.0", "pino-std-serializers": "^7.0.0", "process-warning": "^5.0.0", "quick-format-unescaped": "^4.0.3", "real-require": "^0.2.0", "safe-stable-stringify": "^2.3.1", "sonic-boom": "^4.0.1", "thread-stream": "^3.0.0" }, "bin": { "pino": "bin.js" } }, "sha512-vnMCM6xZTb1WDmLvtG2lE/2p+t9hDEIvTWJsu6FejkE62vB7gDhvzrpFR4Cw2to+9JNQxVnkAKVPA1KPB98vWg=="],
 
     "pino-abstract-transport": ["pino-abstract-transport@2.0.0", "", { "dependencies": { "split2": "^4.0.0" } }, "sha512-F63x5tizV6WCh4R6RHyi2Ml+M70DNRXt/+HANowMflpgGFMAym/VKm6G7ZOQRjqN7XbGxK1Lg9t6ZrtzOaivMw=="],
@@ -344,6 +391,8 @@
 
     "queue": ["queue@6.0.2", "", { "dependencies": { "inherits": "~2.0.3" } }, "sha512-iHZWu+q3IdFZFX36ro/lKBkSvfkztY5Y7HMiPlOUjhupPcG2JMfst2KKEpu5XndviX/3UhFbRngUPNKtgvtZiA=="],
 
+    "queue-microtask": ["queue-microtask@1.2.3", "", {}, "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A=="],
+
     "quick-format-unescaped": ["quick-format-unescaped@4.0.4", "", {}, "sha512-tYC1Q1hgyRuHgloV/YXs2w15unPVh8qfu/qCTfhTYamaw7fyhumKa2yGpdSo87vY32rIclj+4fWYQXUMs9EHvg=="],
 
     "real-require": ["real-require@0.2.0", "", {}, "sha512-57frrGM/OCTLqLOAh0mhVA9VBMHd+9U7Zb2THMGdBUoZVOtGbJzjxsYGDJ3A9AYYCP4hn6y1TVbaOfzWtm5GFg=="],
@@ -362,6 +411,8 @@
 
     "rfdc": ["rfdc@1.4.1", "", {}, "sha512-q1b3N5QkRUWUl7iyylaaj3kOpIT0N2i9MqIEQXP73GVsN9cw3fdx8X63cEmWhJGi2PPCF23Ijp7ktmd39rawIA=="],
 
+    "run-parallel": ["run-parallel@1.2.0", "", { "dependencies": { "queue-microtask": "^1.2.2" } }, "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA=="],
+
     "safe-buffer": ["safe-buffer@5.2.1", "", {}, "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="],
 
     "safe-regex2": ["safe-regex2@5.0.0", "", { "dependencies": { "ret": "~0.5.0" } }, "sha512-YwJwe5a51WlK7KbOJREPdjNrpViQBI3p4T50lfwPuDhZnE3XGVTlGvi+aolc5+RvxDD6bnUmjVsU9n1eboLUYw=="],
@@ -404,8 +455,12 @@
 
     "thread-stream": ["thread-stream@3.1.0", "", { "dependencies": { "real-require": "^0.2.0" } }, "sha512-OqyPZ9u96VohAyMfJykzmivOrY2wfMSf3C5TtFJVgN+Hm6aj+voFhlK+kZEIv2FBh1X6Xp3DlnCOfEQ3B2J86A=="],
 
+    "to-regex-range": ["to-regex-range@5.0.1", "", { "dependencies": { "is-number": "^7.0.0" } }, "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ=="],
+
     "toad-cache": ["toad-cache@3.7.0", "", {}, "sha512-/m8M+2BJUpoJdgAHoG+baCwBT+tf2VraSfkBgl0Y00qIWt41DJ8R5B8nsEw0I58YwF5IZH6z24/2TobDKnqSWw=="],
 
+    "ts-api-utils": ["ts-api-utils@2.1.0", "", { "peerDependencies": { "typescript": ">=4.8.4" } }, "sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ=="],
+
     "tslib": ["tslib@2.8.1", "", {}, "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w=="],
 
     "type-check": ["type-check@0.4.0", "", { "dependencies": { "prelude-ls": "^1.2.1" } }, "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew=="],
@@ -414,6 +469,8 @@
 
     "typescript": ["typescript@5.8.3", "", { "bin": { "tsc": "bin/tsc", "tsserver": "bin/tsserver" } }, "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ=="],
 
+    "typescript-eslint": ["typescript-eslint@8.37.0", "", { "dependencies": { "@typescript-eslint/eslint-plugin": "8.37.0", "@typescript-eslint/parser": "8.37.0", "@typescript-eslint/typescript-estree": "8.37.0", "@typescript-eslint/utils": "8.37.0" }, "peerDependencies": { "eslint": "^8.57.0 || ^9.0.0", "typescript": ">=4.8.4 <5.9.0" } }, "sha512-TnbEjzkE9EmcO0Q2zM+GE8NQLItNAJpMmED1BdgoBMYNdqMhzlbqfdSwiRlAzEK2pA9UzVW0gzaaIzXWg2BjfA=="],
+
     "undici-types": ["undici-types@7.8.0", "", {}, "sha512-9UJ2xGDvQ43tYyVMpuHlsgApydB8ZKfVYTsLDhXkFL/6gfkp+U8xTGdh8pMJv1SpZna0zxG1DwsKZsreLbXBxw=="],
 
     "uri-js": ["uri-js@4.4.1", "", { "dependencies": { "punycode": "^2.1.0" } }, "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg=="],
@@ -454,8 +511,14 @@
 
     "@isaacs/cliui/wrap-ansi": ["wrap-ansi@8.1.0", "", { "dependencies": { "ansi-styles": "^6.1.0", "string-width": "^5.0.1", "strip-ansi": "^7.0.1" } }, "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ=="],
 
+    "@typescript-eslint/eslint-plugin/ignore": ["ignore@7.0.5", "", {}, "sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg=="],
+
+    "@typescript-eslint/typescript-estree/minimatch": ["minimatch@9.0.5", "", { "dependencies": { "brace-expansion": "^2.0.1" } }, "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow=="],
+
     "ajv-formats/ajv": ["ajv@8.17.1", "", { "dependencies": { "fast-deep-equal": "^3.1.3", "fast-uri": "^3.0.1", "json-schema-traverse": "^1.0.0", "require-from-string": "^2.0.2" } }, "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g=="],
 
+    "fast-glob/glob-parent": ["glob-parent@5.1.2", "", { "dependencies": { "is-glob": "^4.0.1" } }, "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow=="],
+
     "fast-json-stringify/ajv": ["ajv@8.17.1", "", { "dependencies": { "fast-deep-equal": "^3.1.3", "fast-uri": "^3.0.1", "json-schema-traverse": "^1.0.0", "require-from-string": "^2.0.2" } }, "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g=="],
 
     "fastify/secure-json-parse": ["secure-json-parse@4.0.0", "", {}, "sha512-dxtLJO6sc35jWidmLxo7ij+Eg48PM/kleBsxpC8QJE0qJICe+KawkDQmvCMZUr9u7WKVHgMW6vy3fQ7zMiFZMA=="],
@@ -472,6 +535,8 @@
 
     "@isaacs/cliui/wrap-ansi/ansi-styles": ["ansi-styles@6.2.1", "", {}, "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug=="],
 
+    "@typescript-eslint/typescript-estree/minimatch/brace-expansion": ["brace-expansion@2.0.2", "", { "dependencies": { "balanced-match": "^1.0.0" } }, "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ=="],
+
     "ajv-formats/ajv/json-schema-traverse": ["json-schema-traverse@1.0.0", "", {}, "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug=="],
 
     "fast-json-stringify/ajv/json-schema-traverse": ["json-schema-traverse@1.0.0", "", {}, "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug=="],
diff --git a/pkgs/server/package.json b/pkgs/server/package.json
index bf0d917..60e92c6 100644
--- a/pkgs/server/package.json
+++ b/pkgs/server/package.json
@@ -24,6 +24,7 @@
     "@types/bun": "latest",
     "eslint": "^9.18.0",
     "eslint-config-prettier": "^9.1.0",
-    "prettier": "^3.4.2"
+    "prettier": "^3.4.2",
+    "typescript-eslint": "^8.37.0"
   }
 }
diff --git a/pkgs/server/src/modules/invoice/entities/Address.ts b/pkgs/server/src/modules/invoice/entities/Address.ts
index 51a1453..c4bc4b0 100644
--- a/pkgs/server/src/modules/invoice/entities/Address.ts
+++ b/pkgs/server/src/modules/invoice/entities/Address.ts
@@ -1,58 +1,58 @@
 import {
-    Entity,
-    Column,
-    CreateDateColumn,
-    UpdateDateColumn,
-    ManyToOne,
-    PrimaryGeneratedColumn,
-    type Relation,
-    OneToOne,
-    OneToMany
+  Entity,
+  Column,
+  CreateDateColumn,
+  UpdateDateColumn,
+  PrimaryGeneratedColumn,
+  OneToMany
 } from 'typeorm';
+
 import { Company } from './Company';
 import { Recipient } from './Recipient';
 import { Invoice } from './Invoice';
 
+import type { Relation } from 'typeorm';
+
 @Entity({
-    name: 'address',
+  name: 'address'
 })
 export class Address {
-    @PrimaryGeneratedColumn('uuid')
-    id: string;
+  @PrimaryGeneratedColumn('uuid')
+  id: string;
 
-    @Column()
-    StreetAddress1: string;
+  @Column()
+  StreetAddress1: string;
 
-    @Column()
-    StreetAddress2: string;
+  @Column()
+  StreetAddress2: string;
 
-    @Column()
-    city: string;
+  @Column()
+  city: string;
 
-    @Column()
-    cityArea: string;
+  @Column()
+  cityArea: string;
 
-    @Column()
-    postalCode: string;
+  @Column()
+  postalCode: string;
 
-    @Column()
-    country: string;
+  @Column()
+  country: string;
 
-    @CreateDateColumn()
-    createdAt: Date;
+  @CreateDateColumn()
+  createdAt: Date;
 
-    @UpdateDateColumn()
-    updatedAt: Date;
+  @UpdateDateColumn()
+  updatedAt: Date;
 
-    @OneToMany(() => Company, (company) => company.address)
-    companies: Company[];
+  @OneToMany(() => Company, (company) => company.address)
+  companies: Relation<Company[]>;
 
-    @OneToMany(() => Recipient, (recipient) => recipient.address)
-    recipients: Recipient[];
+  @OneToMany(() => Recipient, (recipient) => recipient.address)
+  recipients: Relation<Recipient[]>;
 
-    @OneToMany(() => Invoice, (invoice) => invoice.billToAddress)
-    billedInvoices: Invoice[];
+  @OneToMany(() => Invoice, (invoice) => invoice.billToAddress)
+  billedInvoices: Relation<Invoice[]>;
 
-    @OneToMany(() => Invoice, (invoice) => invoice.shipToAddress)
-    shippedInvoices: Invoice[];
+  @OneToMany(() => Invoice, (invoice) => invoice.shipToAddress)
+  shippedInvoices: Relation<Invoice[]>;
 }
diff --git a/pkgs/server/src/modules/invoice/entities/Company.ts b/pkgs/server/src/modules/invoice/entities/Company.ts
index 9414171..9e911c4 100644
--- a/pkgs/server/src/modules/invoice/entities/Company.ts
+++ b/pkgs/server/src/modules/invoice/entities/Company.ts
@@ -5,15 +5,17 @@ import {
   CreateDateColumn,
   UpdateDateColumn,
   ManyToOne,
-  OneToMany,
+  OneToMany
 } from 'typeorm';
-import { User } from '../../user';
 
+import { User } from '../../user';
 import { Address } from './Address';
 import { Invoice } from './Invoice';
 
+import type { Relation } from 'typeorm';
+
 @Entity({
-     name: 'company' 
+  name: 'company'
 })
 export class Company {
   @PrimaryGeneratedColumn('uuid')
@@ -38,11 +40,11 @@ export class Company {
   updatedAt: Date;
 
   @ManyToOne(() => User, (user) => user.companies)
-  user: User;
+  user: Relation<User>;
 
   @ManyToOne(() => Address, (address) => address.companies)
-  address: Address;
+  address: Relation<Address>;
 
   @OneToMany(() => Invoice, (invoice) => invoice.company)
-  invoices: Invoice[];
+  invoices: Relation<Invoice[]>;
 }
diff --git a/pkgs/server/src/modules/invoice/entities/Invoice.ts b/pkgs/server/src/modules/invoice/entities/Invoice.ts
index 474a807..3177e24 100644
--- a/pkgs/server/src/modules/invoice/entities/Invoice.ts
+++ b/pkgs/server/src/modules/invoice/entities/Invoice.ts
@@ -5,27 +5,23 @@ import {
   CreateDateColumn,
   UpdateDateColumn,
   ManyToOne,
-  OneToMany,
+  OneToMany
 } from 'typeorm';
+
 import { Company } from './Company';
 import { Recipient } from './Recipient';
 import { Address } from './Address';
 import { User } from '../../user';
 import { InvoiceItem } from './InvoiceItem';
 
-@Entity({ 
-    name: 'invoice' 
+import type { Relation } from 'typeorm';
+
+@Entity({
+  name: 'invoice'
 })
 export class Invoice {
   @PrimaryGeneratedColumn('uuid')
   id: string;
-
-  @ManyToOne(() => Company, (company) => company.invoices)
-  company: Company;
-
-  @ManyToOne(() => Recipient, (recipient) => recipient.invoices)
-  recipientCompany: Recipient;
-
   @Column()
   invoiceNumber: string;
 
@@ -54,14 +50,20 @@ export class Invoice {
   updatedAt: Date;
 
   @ManyToOne(() => Address, (address) => address.billedInvoices)
-  billToAddress: Address;
+  billToAddress: Relation<Address>;
 
   @ManyToOne(() => Address, (address) => address.shippedInvoices)
-  shipToAddress: Address;
+  shipToAddress: Relation<Address>;
 
   @ManyToOne(() => User, (user) => user.invoices)
-  user: User;
+  user: Relation<User>;
 
   @OneToMany(() => InvoiceItem, (item) => item.invoice, { cascade: true })
-  items: InvoiceItem[];
+  items: Relation<InvoiceItem[]>;
+
+  @ManyToOne(() => Company, (company) => company.invoices)
+  company: Relation<Company>;
+
+  @ManyToOne(() => Recipient, (recipient) => recipient.invoices)
+  recipientCompany: Relation<Recipient>;
 }
diff --git a/pkgs/server/src/modules/invoice/entities/InvoiceItem.ts b/pkgs/server/src/modules/invoice/entities/InvoiceItem.ts
index 2ad3355..efc76e0 100644
--- a/pkgs/server/src/modules/invoice/entities/InvoiceItem.ts
+++ b/pkgs/server/src/modules/invoice/entities/InvoiceItem.ts
@@ -4,20 +4,20 @@ import {
   Column,
   ManyToOne,
   CreateDateColumn,
-  UpdateDateColumn,
+  UpdateDateColumn
 } from 'typeorm';
+
 import { Invoice } from './Invoice';
 
-@Entity({ 
-    name: 'invoice_item' 
+import type { Relation } from 'typeorm';
+
+@Entity({
+  name: 'invoice_item'
 })
 export class InvoiceItem {
   @PrimaryGeneratedColumn('uuid')
   id: string;
 
-  @ManyToOne(() => Invoice, (invoice) => invoice.items)
-  invoice: Invoice;
-
   @Column('float')
   amount: number;
 
@@ -35,4 +35,7 @@ export class InvoiceItem {
 
   @UpdateDateColumn()
   updatedAt: Date;
+
+  @ManyToOne(() => Invoice, (invoice) => invoice.items)
+  invoice: Relation<Invoice>;
 }
diff --git a/pkgs/server/src/modules/invoice/entities/Recipient.ts b/pkgs/server/src/modules/invoice/entities/Recipient.ts
index 8189aa1..ff3ea7b 100644
--- a/pkgs/server/src/modules/invoice/entities/Recipient.ts
+++ b/pkgs/server/src/modules/invoice/entities/Recipient.ts
@@ -5,13 +5,16 @@ import {
   CreateDateColumn,
   UpdateDateColumn,
   ManyToOne,
-  OneToMany,
+  OneToMany
 } from 'typeorm';
+
 import { Address } from './Address';
 import { Invoice } from './Invoice';
 
-@Entity({ 
-    name: 'recipient' 
+import type { Relation } from 'typeorm';
+
+@Entity({
+  name: 'recipient'
 })
 export class Recipient {
   @PrimaryGeneratedColumn('uuid')
@@ -30,8 +33,8 @@ export class Recipient {
   updatedAt: Date;
 
   @ManyToOne(() => Address, (address) => address.recipients)
-  address: Address;
+  address: Relation<Address>;
 
   @OneToMany(() => Invoice, (invoice) => invoice.recipientCompany)
-  invoices: Invoice[];
+  invoices: Relation<Invoice[]>;
 }
diff --git a/pkgs/server/src/modules/invoice/entities/index.ts b/pkgs/server/src/modules/invoice/entities/index.ts
index 3c5c456..922dd4a 100644
--- a/pkgs/server/src/modules/invoice/entities/index.ts
+++ b/pkgs/server/src/modules/invoice/entities/index.ts
@@ -1,4 +1,3 @@
-
 export { Address } from './Address';
 export { Company } from './Company';
 export { Invoice } from './Invoice';
diff --git a/pkgs/server/src/modules/invoice/routes/v1.ts b/pkgs/server/src/modules/invoice/routes/v1.ts
index 985b868..605b253 100644
--- a/pkgs/server/src/modules/invoice/routes/v1.ts
+++ b/pkgs/server/src/modules/invoice/routes/v1.ts
@@ -2,59 +2,58 @@ import type { FastifyInstance, FastifyPluginCallback } from 'fastify';
 import type { CreateInvoiceDto } from '../service';
 
 type Params = {
-    id: string;
+  id: string;
 };
 
 export const apiV1InvoiceRouter: FastifyPluginCallback = (fastify: FastifyInstance, _, done) => {
-    fastify.get('/', async (_, reply) => {
-        const result = await fastify.domain.user.getUser();
-        return reply.status(200).send(result);
-    });
-
-    fastify.get<{ Params: Params }>('/:id', async (request, reply) => {
-        const id = request?.params.id as string;
+  fastify.get('/', async (_, reply) => {
+    const result = await fastify.domain.user.getUser();
+    return reply.status(200).send(result);
+  });
 
-        if (!id) {
-            return reply.status(400).send({ message: 'Id is required' });
-        }
+  fastify.get<{ Params: Params }>('/:id', async (request, reply) => {
+    const id = request?.params.id as string;
 
-        const maybeUser = await fastify.domain.user.findBy(id);
+    if (!id) {
+      return reply.status(400).send({ message: 'Id is required' });
+    }
 
-        if (!maybeUser) {
-            return reply.status(400).send({ message: 'Title not found' });
-        }
+    const maybeUser = await fastify.domain.user.findBy(id);
 
-        return reply.status(200).send(maybeUser);
-    });
+    if (!maybeUser) {
+      return reply.status(400).send({ message: 'Title not found' });
+    }
 
-    fastify.post('/', async (request, reply) => {
-        const reqBody = request.body as CreateInvoiceDto;
-        const result = await fastify.domain.user.createUser({
-            name: reqBody.name,
-            surname: reqBody.surname,
-            email: reqBody.email,
-        });
+    return reply.status(200).send(maybeUser);
+  });
 
-        return reply.status(201).send(result);
+  fastify.post('/', async (request, reply) => {
+    const reqBody = request.body as CreateInvoiceDto;
+    const result = await fastify.domain.user.createUser({
+      name: reqBody.name,
+      surname: reqBody.surname,
+      email: reqBody.email
     });
 
-    fastify.delete('/:id', async (request, reply) => {
-        const id = (request?.params as unknown as { id?: string })?.id as string;
+    return reply.status(201).send(result);
+  });
 
-        if (!id) {
-            return reply.status(400).send({ message: 'Id is required' });
-        }
+  fastify.delete('/:id', async (request, reply) => {
+    const id = (request?.params as unknown as { id?: string })?.id as string;
 
-        await fastify.domain.user.deleteUser(id);
+    if (!id) {
+      return reply.status(400).send({ message: 'Id is required' });
+    }
 
-        return reply.status(200).send({ message: 'Title deleted' });
-    });
+    await fastify.domain.user.deleteUser(id);
 
-    done();
-};
+    return reply.status(200).send({ message: 'Title deleted' });
+  });
 
+  done();
+};
 
-// Posible way to improve code. 
+// Posible way to improve code.
 
 // export interface CreateUserDto {
 //   name: string;
@@ -75,4 +74,4 @@ export const apiV1InvoiceRouter: FastifyPluginCallback = (fastify: FastifyInstan
 //   });
 
 //   done();
-// };
\ No newline at end of file
+// };
diff --git a/pkgs/server/src/modules/invoice/service.ts b/pkgs/server/src/modules/invoice/service.ts
index ffc8e55..fc2a249 100644
--- a/pkgs/server/src/modules/invoice/service.ts
+++ b/pkgs/server/src/modules/invoice/service.ts
@@ -1,10 +1,9 @@
-import { In, Repository } from 'typeorm';
+import { Repository } from 'typeorm';
 
-import { Entity } from '..';
-import type { User } from '../user';
+import { Entity } from './';
 
 export type CreateInvoiceDto = {
-    title: string;
+  title: string;
 };
 
 export class InvoiceService {
@@ -13,29 +12,4 @@ export class InvoiceService {
   constructor(invoiceRepository: Repository<Entity.Invoice>) {
     this.invoiceRepository = invoiceRepository;
   }
-
-  // async create(user: User, dto: CreateInvoiceDto): Promise<Entity.Invoice[]> {
-  //   const entityInvoice = new Entity.Invoice();
-
-  //   entityCv.title = dto.title;
-  //   entityCv.user = user;
-
-  //   const entityContact = new Entity.Contact();
-
-  //   if (dto.contact) {
-  //     const contactPayload = dto.contact;
-
-  //     if (contactPayload.email) {
-  //       entityContact.email = contactPayload.email;
-  //     }
-  //   }
-
-  //   entityContact.user = user;
-
-  //   await this.cvContactRepository.insert(entityContact);
-  //   entityCv.contact = entityContact;
-  //   const inserted = await this.cvRepository.insert(entityCv);
-
-  //   return this.cvRepository.findBy({ id: In([inserted.identifiers[0].id]) });
-  // }
 }
diff --git a/pkgs/server/src/modules/user/entity.ts b/pkgs/server/src/modules/user/entity.ts
index b45da58..8b6cf56 100644
--- a/pkgs/server/src/modules/user/entity.ts
+++ b/pkgs/server/src/modules/user/entity.ts
@@ -4,14 +4,13 @@ import {
   Column,
   CreateDateColumn,
   UpdateDateColumn,
-  OneToMany,
+  OneToMany
 } from 'typeorm';
 import { Invoice } from '../invoice/entities/Invoice';
 import { Company } from '../invoice/entities/Company';
 
-
-@Entity({ 
-  name: 'user' 
+@Entity({
+  name: 'user'
 })
 export class User {
   @PrimaryGeneratedColumn('uuid')
diff --git a/pkgs/server/src/modules/user/index.ts b/pkgs/server/src/modules/user/index.ts
index c696a9d..ad40b37 100644
--- a/pkgs/server/src/modules/user/index.ts
+++ b/pkgs/server/src/modules/user/index.ts
@@ -1,3 +1,3 @@
 export { UserService } from './service';
 export { User } from './entity';
-export { userRoutes } from './routes';
\ No newline at end of file
+export { userRoutes } from './routes';
diff --git a/pkgs/server/src/modules/user/routes/v1.ts b/pkgs/server/src/modules/user/routes/v1.ts
index 240d420..d42a604 100644
--- a/pkgs/server/src/modules/user/routes/v1.ts
+++ b/pkgs/server/src/modules/user/routes/v1.ts
@@ -2,59 +2,58 @@ import type { FastifyInstance, FastifyPluginCallback } from 'fastify';
 import type { CreateUserDto } from '../service';
 
 type Params = {
-    id: string;
+  id: string;
 };
 
 export const apiV1UserRouter: FastifyPluginCallback = (fastify: FastifyInstance, _, done) => {
-    fastify.get('/', async (_, reply) => {
-        const result = await fastify.domain.user.getUser();
-        return reply.status(200).send(result);
-    });
-
-    fastify.get<{ Params: Params }>('/:id', async (request, reply) => {
-        const id = request?.params.id as string;
+  fastify.get('/', async (_, reply) => {
+    const result = await fastify.domain.user.getUser();
+    return reply.status(200).send(result);
+  });
 
-        if (!id) {
-            return reply.status(400).send({ message: 'Id is required' });
-        }
+  fastify.get<{ Params: Params }>('/:id', async (request, reply) => {
+    const id = request?.params.id as string;
 
-        const maybeUser = await fastify.domain.user.findBy(id);
+    if (!id) {
+      return reply.status(400).send({ message: 'Id is required' });
+    }
 
-        if (!maybeUser) {
-            return reply.status(400).send({ message: 'Title not found' });
-        }
+    const maybeUser = await fastify.domain.user.findBy(id);
 
-        return reply.status(200).send(maybeUser);
-    });
+    if (!maybeUser) {
+      return reply.status(400).send({ message: 'Title not found' });
+    }
 
-    fastify.post('/', async (request, reply) => {
-        const reqBody = request.body as CreateUserDto;
-        const result = await fastify.domain.user.createUser({
-            name: reqBody.name,
-            surname: reqBody.surname,
-            email: reqBody.email,
-        });
+    return reply.status(200).send(maybeUser);
+  });
 
-        return reply.status(201).send(result);
+  fastify.post('/', async (request, reply) => {
+    const reqBody = request.body as CreateUserDto;
+    const result = await fastify.domain.user.createUser({
+      name: reqBody.name,
+      surname: reqBody.surname,
+      email: reqBody.email
     });
 
-    fastify.delete('/:id', async (request, reply) => {
-        const id = (request?.params as unknown as { id?: string })?.id as string;
+    return reply.status(201).send(result);
+  });
 
-        if (!id) {
-            return reply.status(400).send({ message: 'Id is required' });
-        }
+  fastify.delete('/:id', async (request, reply) => {
+    const id = (request?.params as unknown as { id?: string })?.id as string;
 
-        await fastify.domain.user.deleteUser(id);
+    if (!id) {
+      return reply.status(400).send({ message: 'Id is required' });
+    }
 
-        return reply.status(200).send({ message: 'Title deleted' });
-    });
+    await fastify.domain.user.deleteUser(id);
 
-    done();
-};
+    return reply.status(200).send({ message: 'Title deleted' });
+  });
 
+  done();
+};
 
-// Posible way to improve code. 
+// Posible way to improve code.
 
 // export interface CreateUserDto {
 //   name: string;
@@ -75,4 +74,4 @@ export const apiV1UserRouter: FastifyPluginCallback = (fastify: FastifyInstance,
 //   });
 
 //   done();
-// };
\ No newline at end of file
+// };
diff --git a/pkgs/server/src/modules/user/service.ts b/pkgs/server/src/modules/user/service.ts
index 14b9385..f1d83a5 100644
--- a/pkgs/server/src/modules/user/service.ts
+++ b/pkgs/server/src/modules/user/service.ts
@@ -2,8 +2,19 @@ import { In, Repository } from 'typeorm';
 
 import { User } from './entity';
 
-export type CreateUserDto = Omit<User, 'id' | 'contact' | 'personal' |
- 'socialNetwork' | 'experience' | 'education' | 'language' | 'cv' | 'createdAt' |'updatedAt'>;
+export type CreateUserDto = Omit<
+  User,
+  | 'id'
+  | 'contact'
+  | 'personal'
+  | 'socialNetwork'
+  | 'experience'
+  | 'education'
+  | 'language'
+  | 'cv'
+  | 'createdAt'
+  | 'updatedAt'
+>;
 
 export class UserService {
   private userRepository: Repository<User>;
@@ -19,7 +30,7 @@ export class UserService {
   }
 
   async createUser(dto: CreateUserDto): Promise<User[]> {
-    const user = new User();  
+    const user = new User();
 
     user.name = dto.name;
     user.surname = dto.surname;
@@ -39,7 +50,7 @@ export class UserService {
   }
 
   // FIXME: Use findById as nameCreateCVParams
-  async findBy(id: string): Promise<User[]| null> {
+  async findBy(id: string): Promise<User[] | null> {
     const user = await this.userRepository.findBy({
       id
     });
diff --git a/pkgs/server/src/server/plugins/domain.ts b/pkgs/server/src/server/plugins/domain.ts
index 5f02502..8f4b94e 100644
--- a/pkgs/server/src/server/plugins/domain.ts
+++ b/pkgs/server/src/server/plugins/domain.ts
@@ -2,11 +2,9 @@ import 'reflect-metadata';
 import fp from 'fastify-plugin';
 import { DataSource } from 'typeorm';
 
-import { Entity as InvoiceEntity, InvoiceService } from '../../modules/invoice';
-import { User, UserService } from '../../modules/user';
-
 import { readConfig } from '../config';
-import { Invoice } from '../../modules/invoice/entities/Invoice';
+import { User, UserService } from '../../modules/user';
+import { Entity as InvoiceEntity, InvoiceService } from '../../modules/invoice';
 
 export type DomainServices = {
   invoice: InvoiceService;
@@ -27,7 +25,14 @@ export const domainServicesPlugin = fp(async (server) => {
       database: config.postgresDb,
       logging: true,
       synchronize: true,
-      entities: [User, Invoice, ]
+      entities: [
+        User,
+        InvoiceEntity.Address,
+        InvoiceEntity.Company,
+        InvoiceEntity.Invoice,
+        InvoiceEntity.InvoiceItem,
+        InvoiceEntity.Recipient
+      ]
     });
 
     await appDataSource.connect();
@@ -37,7 +42,7 @@ export const domainServicesPlugin = fp(async (server) => {
     const userRepository = appDataSource.getRepository(User);
     const domainServices: DomainServices = {
       invoice: new InvoiceService(invoiceRepository),
-      user: new UserService(userRepository),
+      user: new UserService(userRepository)
     };
 
     server.decorate(DOMAIN_SERVICES_PLUGIN_NAME, domainServices);
